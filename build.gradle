buildscript {
	repositories {
		mavenLocal()
		mavenCentral()
		jcenter()
		maven { url "https://plugins.gradle.org/m2/" }
	}
	dependencies {
		classpath("de.carne:java-gradleplugins:0.4.0")
		classpath("gradle.plugin.install4j.install4j:gradle_plugin:7.0.9")
	}
}

apply plugin: "java-library"
apply plugin: "de.carne.gradleplugins.java"
apply plugin: "jacoco"
apply plugin: "distribution"
apply plugin: "com.install4j.gradle"
apply plugin: "eclipse"

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

repositories {
	if(project.version.endsWith("-SNAPSHOT")) {
		mavenLocal()
		maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
		maven { url "https://oss.jfrog.org/libs-snapshot/" }
	} 
	jcenter()
	mavenCentral()
}

dependencies {
	compileOnly(group: "org.eclipse.jdt", name: "org.eclipse.jdt.annotation", version: project.annotationVersion)
	testCompileOnly(group: "org.eclipse.jdt", name: "org.eclipse.jdt.annotation", version: project.annotationVersion)
	
	implementation(group: "de.carne", name: "java-jfx", version: project.javaJfxVersion)
	implementation(group: "org.bouncycastle", name: "bcpkix-jdk15on", version: project.bouncycastleVersion)

	testImplementation(group: "junit", name: "junit", version: project.junitVersion)
}

jacocoTestReport {
	reports {
		xml.enabled true
		xml.destination file("${buildDir}/reports/jacoco/coverage.xml")
		html.enabled true
		html.destination file("${buildDir}/reports/jacoco")
		csv.enabled false
	}
}

jar {
	def buildTimestamp = new java.text.SimpleDateFormat("yyyyMMddHHmmss").format(new Date());
	
	manifest {
		attributes(
			"X-Module-Name" : project.name,
			"X-Module-Version": version,
			"X-Module-Build" : buildTimestamp
		)
	}
}

task bootJar(type: Jar) {
	appendix = "boot"
	entryCompression = ZipEntryCompression.STORED
	from jar
	from configurations.runtimeClasspath.collect {
		it.name.matches("java-boot-.*.jar") ? zipTree(it) : it
	}
	manifest {
		attributes(
			"Main-Class": "de.carne.boot.Application",
		)
	}
}

distributions {
	main {
		contents {
			from bootJar
		}
	}
}

tasks.withType(Tar){
	compression = Compression.GZIP
	extension = "tar.gz"
}

install4j {
	installDir = file(project.hasProperty("install4jHome") ? install4jHome : ".")
}

task assembleMedia(type: com.install4j.gradle.Install4jTask, dependsOn: assembleDist) {
	projectFile = file("src/main/install4j/certmgr.install4j")
	variables = [
		i4jProjectName: project.name,
		i4jProjectVersion: version,
		i4jProjectBaseDir: projectDir,
		i4jProjectBuildDir: buildDir,
		i4jProjectSigningDir: file(project.hasProperty("install4jSigningHome") ? install4jSigningHome : ".")
	]
	if(project.hasProperty("install4jSigningPassword")) {
		disableSigning = false
		macKeystorePassword = install4jSigningPassword
	} else {
		disableSigning = true
	}
	quiet = true		
}

eclipse {
	classpath {
		downloadSources = true
		downloadJavadoc = true
		file {
			whenMerged {
				def eeaPath = project.findProperty("eclipse.eeaPath");
				 
				entries.forEach {
					if(it.path.startsWith("org.eclipse.jdt.launching.JRE_CONTAINER")) {
						it.accessRules.add(new org.gradle.plugins.ide.eclipse.model.AccessRule("0", "javafx/**"))
						if(eeaPath != null) {
							it.entryAttributes.put("annotationpath", eeaPath)
						}
					} else if(it.path.contains("/caches/modules-2/")) {
						if(eeaPath != null) {
							it.entryAttributes.put("annotationpath", eeaPath)
						}
					}
				}
			}
		}
	}
}
