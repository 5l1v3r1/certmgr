apply plugin: 'java'
apply plugin: 'de.carne.gradleplugins.java'
apply plugin: 'jacoco'
apply plugin: 'distribution'
apply plugin: 'eclipse'

buildscript {
	repositories {
		mavenLocal()
		mavenCentral()
	}
	dependencies {
		classpath("de.carne:java-gradleplugins:0.4.0")
	}
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
	mavenLocal()
	mavenCentral()
	maven { url 'https://oss.sonatype.org/content/repositories/snapshots' } 
}

dependencies {
	compile('de.carne:java-jfx:3')
	compile('org.bouncycastle:bcpkix-jdk15on:1.57')

	testCompile('junit:junit:4.12')
}

jacocoTestReport {
	reports {
		xml.enabled true
		xml.destination file("${buildDir}/reports/jacoco/coverage.xml")
		html.enabled true
		html.destination file("${buildDir}/reports/jacoco")
		csv.enabled false
	}
}

import java.text.SimpleDateFormat

jar {
	def buildTimestamp = new SimpleDateFormat("yyyyMMddHHmmss").format(new Date());
	
	manifest {
		attributes(
			'Main-Class': 'de.carne.ApplicationLoader',
			'X-Version-ProjectId': project.name,
			'X-Version-ProjectName' : project.name,
			'X-Version-ProjectVersion': version,
			'X-Version-ProjectBuild' : buildTimestamp
		)
	}
	from configurations.runtime.collect {
		it.name.matches('(java-default-.*.jar)|(java-jfx-.*.jar)') ? zipTree(it).matching { exclude 'META-INF/**' } : it
	}
}

distributions {
	main {
		contents {
			from jar
		}
	}
}

tasks.withType(Tar){
	compression = Compression.GZIP
	extension = 'tar.gz'
}

import org.gradle.plugins.ide.eclipse.model.AccessRule

eclipse {
	classpath {
		defaultOutputDir = file('eclipse-build')
		file {
			whenMerged {
				def jre = entries.find { it.path.contains 'org.eclipse.jdt.launching.JRE_CONTAINER' }
				
				jre.accessRules.add(new AccessRule('0', 'javafx/**'))
			}
		}
	}
}
