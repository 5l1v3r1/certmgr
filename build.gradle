buildscript {
	repositories {
		mavenLocal()
		mavenCentral()
		jcenter()
		maven { url 'https://plugins.gradle.org/m2/' }
	}
	dependencies {
		classpath("de.carne:java-gradleplugins:0.4.0")
		classpath("gradle.plugin.install4j.install4j:gradle_plugin:7.0.7")
	}
}

apply plugin: 'java'
apply plugin: 'de.carne.gradleplugins.java'
apply plugin: 'jacoco'
apply plugin: 'distribution'
apply plugin: 'com.install4j.gradle'
apply plugin: 'eclipse'

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

repositories {
	if(project.version.endsWith("-SNAPSHOT")) {
		mavenLocal()
		maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
		maven { url "https://oss.jfrog.org/libs-snapshot/" }
	} 
	jcenter()
	mavenCentral()
}

dependencies {
	compile('de.carne.common:java-default:8.5.1')
	compile("de.carne:java-jfx:8.2.0")
	compile("org.bouncycastle:bcpkix-jdk15on:1.60")
	testCompile("junit:junit:4.12")
}

jacocoTestReport {
	reports {
		xml.enabled true
		xml.destination file("${buildDir}/reports/jacoco/coverage.xml")
		html.enabled true
		html.destination file("${buildDir}/reports/jacoco")
		csv.enabled false
	}
}

jar {
	def buildTimestamp = new java.text.SimpleDateFormat("yyyyMMddHHmmss").format(new Date());
	
	manifest {
		attributes(
			'X-Application-Name' : project.name,
			'X-Application-Version': version,
			'X-Application-Build' : buildTimestamp
		)
	}
}

task bootJar(type: Jar) {
	appendix = 'boot'
	entryCompression = ZipEntryCompression.STORED
	from jar
	from configurations.runtime.collect {
		it.name.matches('java-boot-.*.jar') ? zipTree(it) : it
	}
	manifest {
		attributes(
			'Main-Class': 'de.carne.boot.Application',
		)
	}
}

distributions {
	main {
		contents {
			from bootJar
		}
	}
}

tasks.withType(Tar){
	compression = Compression.GZIP
	extension = 'tar.gz'
}

install4j {
	installDir = file(project.hasProperty("install4jHome") ? install4jHome : ".")
}

task assembleMedia(type: com.install4j.gradle.Install4jTask, dependsOn: assembleDist) {
	projectFile = file("src/main/install4j/certmgr.install4j")
	variables = [
		i4jProjectName: project.name,
		i4jProjectVersion: version,
		i4jProjectBaseDir: projectDir,
		i4jProjectBuildDir: buildDir
	]
	quiet = true		
}

eclipse {
	classpath {
		downloadSources = true
		downloadJavadoc = true
		file {
			whenMerged {
				def jre = entries.find { it.path.contains 'org.eclipse.jdt.launching.JRE_CONTAINER' }
				
				jre.accessRules.add(new org.gradle.plugins.ide.eclipse.model.AccessRule('0', 'javafx/**'))
			}
		}
	}
}
